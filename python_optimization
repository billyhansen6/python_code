#### “In this case study a wedding planner must determine guest seating allocations for a wedding. To model this problem the tables are modelled as the partitions and the guests invited to the wedding are modelled as the elements of S. The wedding planner wishes to maximize the total happiness of all of the tables.”


import pulp

#### At the wedding there had to be at most 5 tables with at most 4 guests per table. 

max_tables = 5
max_table_size = 4

#### There were 17 guests to be assigned a table. I assigned each of them a letter.

guests = 'A B C D E F G I J K L M N O P Q R' .split()

#### I defined the happiness table to calculate the maximum distance between the guests.

def happiness(table):
  return abs(ord(table[0]) - ord(table[-1]))
  
#### I created a list of all possible tables.

possible_tables = [tuple(c) for c in pulp.allcombinations(guests, 
  max_table_size)]
  
#### Created a binary variable to state that a table setting is used.

x = pulp.LpVariable.dicts('table', possible_tables, 
  lowBound = 0,
  upBound = 1,
  cat = pulp.LpInteger)

seating_model = pulp.LpProblem("Wedding Seating Model", pulp.LpMinimize)

seating_model += sum([happiness(table) * x[table] for table in possible_tables])

#### I specified the maximum number of tables.

seating_model += sum([x[table] for table in possible_tables]) <= max_tables, \
  "Maximum_number_of_tables"
 
#### I made sure that each guest can sit at one and only one table.

for guest in guests:
  seating_model += sum([x[table] for table in possible_tables
    if guest in table]) == 1, "Must_seat_%s"%guest
    
    
#### Then I used the command to solve the seatin problem.

seating_model.solve()

#### I found there to indeed be an optimal solution because of the “1” output.

#### Next I printed the optimal solution for where each guest should sit to maximize happiness. First I found the total number of possible solutions, and then the optimal solution.

seating_model.solve()

print "The chosen tables are out of a total of %s:"%len(possible_tables)

for table in possible_tables:
    if x[table].value() == 1.0: 
      print table
      
#### There were 3213 possible solutions, and the optimal solution was printed as an output.
    








  







